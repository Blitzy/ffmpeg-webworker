!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).ffmpegWebworker={})}(this,function(e){"use strict";function t(){importScripts("https://raw.githack.com/Girilloid/ffmpeg/master/ffmpeg-all-codecs.js");var s=Date.now;function a(e){postMessage({type:"stdout",data:e})}onmessage=function(e){var t=e.data;if("command"===t.type){var n={arguments:t.arguments||[],files:t.files||[],print:a,printErr:a,TOTAL_MEMORY:t.totalMemory||33554432};postMessage({data:n.arguments.join(" "),type:"start"}),postMessage({data:"Received command: ".concat(n.arguments.join(" ")).concat(n.TOTAL_MEMORY?".  Processing with ".concat(n.TOTAL_MEMORY," bits."):""),type:"stdout"});var r=s(),i=ffmpeg_run(n),o=s()-r;postMessage({data:"Finished processing (took "+o+"ms)",type:"stdout"}),postMessage({data:i,time:o,type:"done"})}},postMessage({type:"ready"})}var n;function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(){}function f(){f.init.call(this)}function l(e){return void 0===e._maxListeners?f.defaultMaxListeners:e._maxListeners}function c(e,t,n,r){var i,o,s;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if((o=e._events)?(o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]):(o=e._events=new u,e._eventsCount=0),s){if("function"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),!s.warned&&(i=l(e))&&0<i&&s.length>i){s.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=e,a.type=t,a.count=s.length,function(e){"function"==typeof console.warn?console.warn(e):console.log(e)}(a)}}else s=o[t]=n,++e._eventsCount;return e}function p(e,t,n){var r=!1;function i(){e.removeListener(t,i),r||(r=!0,n.apply(e,arguments))}return i.listener=n,i}function h(e){var t=this._events;if(t){var n=t[e];if("function"==typeof n)return 1;if(n)return n.length}return 0}function d(e,t){for(var n=new Array(t);t--;)n[t]=e[t];return n}u.prototype=Object.create(null),(f.EventEmitter=f).usingDomains=!1,f.prototype.domain=void 0,f.prototype._events=void 0,f.prototype._maxListeners=void 0,f.defaultMaxListeners=10,f.init=function(){this.domain=null,f.usingDomains&&n.active&&n.Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new u,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},f.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},f.prototype.getMaxListeners=function(){return l(this)},f.prototype.emit=function(e,t,n,r){var i,o,s,a,u,f,l,c="error"===e;if(f=this._events)c=c&&null==f.error;else if(!c)return!1;if(l=this.domain,c){if(i=t,l)return(i=i||new Error('Uncaught, unspecified "error" event')).domainEmitter=this,i.domain=l,i.domainThrown=!1,l.emit("error",i),!1;if(i instanceof Error)throw i;var p=new Error('Uncaught, unspecified "error" event. ('+i+")");throw p.context=i,p}if(!(o=f[e]))return!1;var h="function"==typeof o;switch(s=arguments.length){case 1:!function(e,t,n){if(t)e.call(n);else for(var r=e.length,i=d(e,r),o=0;o<r;++o)i[o].call(n)}(o,h,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var i=e.length,o=d(e,i),s=0;s<i;++s)o[s].call(n,r)}(o,h,this,t);break;case 3:!function(e,t,n,r,i){if(t)e.call(n,r,i);else for(var o=e.length,s=d(e,o),a=0;a<o;++a)s[a].call(n,r,i)}(o,h,this,t,n);break;case 4:!function(e,t,n,r,i,o){if(t)e.call(n,r,i,o);else for(var s=e.length,a=d(e,s),u=0;u<s;++u)a[u].call(n,r,i,o)}(o,h,this,t,n,r);break;default:for(a=new Array(s-1),u=1;u<s;u++)a[u-1]=arguments[u];!function(e,t,n,r){if(t)e.apply(n,r);else for(var i=e.length,o=d(e,i),s=0;s<i;++s)o[s].apply(n,r)}(o,h,this,a)}return!0},f.prototype.on=f.prototype.addListener=function(e,t){return c(this,e,t,!1)},f.prototype.prependListener=function(e,t){return c(this,e,t,!0)},f.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,p(this,e,t)),this},f.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,p(this,e,t)),this},f.prototype.removeListener=function(e,t){var n,r,i,o,s;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[e]))return this;if(n===t||n.listener&&n.listener===t)0==--this._eventsCount?this._events=new u:(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length;0<o--;)if(n[o]===t||n[o].listener&&n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new u,this;delete r[e]}else!function(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}(n,i);r.removeListener&&this.emit("removeListener",e,s||t)}return this},f.prototype.removeAllListeners=function(e){var t,n;if(!(n=this._events))return this;if(!n.removeListener)return 0===arguments.length?(this._events=new u,this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=new u:delete n[e]),this;if(0===arguments.length){for(var r,i=Object.keys(n),o=0;o<i.length;++o)"removeListener"!==(r=i[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new u,this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(;this.removeListener(e,t[t.length-1]),t[0];);return this},f.prototype.listeners=function(e){var t,n=this._events;return n&&(t=n[e])?"function"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(t):[]},f.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},f.prototype.listenerCount=h,f.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var y,v,m=(function(e,t){var n;(n=t).default=function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"!=typeof t)throw new Error("File content must export a function");var n=t.toString(),r=new Blob(["("+n+")()"],{type:"application/javascript"});return new Worker(URL.createObjectURL(r))},Object.defineProperty(n,"__esModule",{value:!0})}(y={exports:{}},y.exports),y.exports),w=(v=m)&&v.__esModule&&Object.prototype.hasOwnProperty.call(v,"default")?v.default:v,g=t,b=function(){function e(){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(a(o=function(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?a(e):t}(this,s(e).call(this))),"_worker",{}),i(a(o),"_inputFile",{}),i(a(o),"workerIsReady",!1),i(a(o),"readFileAsBufferArray",function(r){return new Promise(function(e,t){var n=new FileReader;n.onload=function(){e(this.result)},n.onerror=function(){t(this.error)},n.readAsArrayBuffer(r)})}),i(a(o),"runCommand",function(r){var i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:33554432;if("string"!=typeof r||!r.length)throw new Error("command should be string and not empty");o.inputFile&&o.inputFile.type?o.convertInputFileToArrayBuffer().then(function(e){for(;!o.workerIsReady;);var t="video-".concat(Date.now(),".webm"),n="-i ".concat(t," ").concat(r);o.worker.postMessage({arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t}],totalMemory:i,type:"command"})}):o.worker.postMessage({arguments:r.split(" "),totalMemory:i,type:"command"})}),i(a(o),"log",function(e){return Array.isArray(e)?console.log.call(null,e):console.log(e)}),i(a(o),"isVideo",function(e){var t=e.type;return e instanceof Blob&&(t.includes("video")||t.includes("audio"))}),i(a(o),"terminate",function(){o.worker.terminate()}),o.initWebWorker(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(e,f),function(e,t,n){t&&r(e.prototype,t),n&&r(e,n)}(e,[{key:"initWebWorker",value:function(){var n=this;this.worker=new w(t),this.log;var r=this.worker.onmessage=function(e){var t=e.data;e&&e.type&&("ready"==t.type?(n.emit("onReady","ffmpeg-asm.js file has been loaded."),n.workerIsReady=!0):"stdout"==t.type?n.emit("onStdout",t.data):"start"==t.type?(n.emit("onFileReceived","File Received"),r("file received ffmpeg command.")):"done"==t.type&&n.emit("onDone",t.data))}}},{key:"inputFileExists",value:function(){var e=this.inputFile;return!!(e&&e instanceof Blob&&e.size&&e.type)}},{key:"convertInputFileToArrayBuffer",value:function(){if(!this.inputFileExists())throw new Error("Input File has not been set");return this.readFileAsBufferArray(this.inputFile)}},{key:"worker",set:function(e){this._worker=e},get:function(){return this._worker}},{key:"inputFile",set:function(e){if(!this.isVideo(e))throw new Error("Input file is expected to be an audio or a video");this._inputFile=e},get:function(){return this._inputFile}}]),e}();e.FFMPEGWebworker=g,e.FFMPEGWebworkerClient=b,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9GRk1QRUdXZWJXb3JrZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvZXZlbnRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3dlYndvcmtlci1maWxlL2Rpc3QvaW5kZXguanMiLCIuLi9zcmMvaW5kZXguanMiLCIuLi9zcmMvRkZNUEVHV2ViV29ya2VyQ2xpZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHdvcmtlckZpbGUgPSAoKSA9PiB7XG4gIGNvbnN0IHdvcmtlclBhdGggPVxuICAgICdodHRwczovL3Jhdy5naXRoYWNrLmNvbS9HaXJpbGxvaWQvZmZtcGVnL21hc3Rlci9mZm1wZWctYWxsLWNvZGVjcy5qcyc7XG5cbiAgaW1wb3J0U2NyaXB0cyh3b3JrZXJQYXRoKTtcblxuICBjb25zdCBub3cgPSBEYXRlLm5vdztcblxuICBmdW5jdGlvbiBwcmludCh0ZXh0KSB7XG4gICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiAnc3Rkb3V0JywgZGF0YTogdGV4dCB9KTtcbiAgfVxuXG4gIG9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGV2ZW50LmRhdGE7XG5cbiAgICBpZiAobWVzc2FnZS50eXBlID09PSAnY29tbWFuZCcpIHtcbiAgICAgIGNvbnN0IE1vZHVsZSA9IHtcbiAgICAgICAgYXJndW1lbnRzOiBtZXNzYWdlLmFyZ3VtZW50cyB8fCBbXSxcbiAgICAgICAgZmlsZXM6IG1lc3NhZ2UuZmlsZXMgfHwgW10sXG4gICAgICAgIHByaW50OiBwcmludCxcbiAgICAgICAgcHJpbnRFcnI6IHByaW50LFxuICAgICAgICBUT1RBTF9NRU1PUlk6IG1lc3NhZ2UudG90YWxNZW1vcnkgfHwgMzM1NTQ0MzIsXG4gICAgICB9O1xuXG4gICAgICBwb3N0TWVzc2FnZSh7XG4gICAgICAgIGRhdGE6IE1vZHVsZS5hcmd1bWVudHMuam9pbignICcpLFxuICAgICAgICB0eXBlOiAnc3RhcnQnLFxuICAgICAgfSk7XG4gICAgICBwb3N0TWVzc2FnZSh7XG4gICAgICAgIGRhdGE6IGBSZWNlaXZlZCBjb21tYW5kOiAke01vZHVsZS5hcmd1bWVudHMuam9pbignICcpfSR7XG4gICAgICAgICAgTW9kdWxlLlRPVEFMX01FTU9SWVxuICAgICAgICAgICAgPyBgLiAgUHJvY2Vzc2luZyB3aXRoICR7TW9kdWxlLlRPVEFMX01FTU9SWX0gYml0cy5gXG4gICAgICAgICAgICA6ICcnXG4gICAgICAgIH1gLFxuICAgICAgICB0eXBlOiAnc3Rkb3V0JyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0aW1lID0gbm93KCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBmZm1wZWdfcnVuKE1vZHVsZSk7XG4gICAgICBjb25zdCB0b3RhbFRpbWUgPSBub3coKSAtIHRpbWU7XG5cbiAgICAgIHBvc3RNZXNzYWdlKHtcbiAgICAgICAgZGF0YTogJ0ZpbmlzaGVkIHByb2Nlc3NpbmcgKHRvb2sgJyArIHRvdGFsVGltZSArICdtcyknLFxuICAgICAgICB0eXBlOiAnc3Rkb3V0JyxcbiAgICAgIH0pO1xuICAgICAgcG9zdE1lc3NhZ2Uoe1xuICAgICAgICBkYXRhOiByZXN1bHQsXG4gICAgICAgIHRpbWU6IHRvdGFsVGltZSxcbiAgICAgICAgdHlwZTogJ2RvbmUnLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHBvc3RNZXNzYWdlKHsgdHlwZTogJ3JlYWR5JyB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdvcmtlckZpbGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkb21haW47XG5cbi8vIFRoaXMgY29uc3RydWN0b3IgaXMgdXNlZCB0byBzdG9yZSBldmVudCBoYW5kbGVycy4gSW5zdGFudGlhdGluZyB0aGlzIGlzXG4vLyBmYXN0ZXIgdGhhbiBleHBsaWNpdGx5IGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIHRvIGdldCBhIFwiY2xlYW5cIiBlbXB0eVxuLy8gb2JqZWN0ICh0ZXN0ZWQgd2l0aCB2OCB2NC45KS5cbmZ1bmN0aW9uIEV2ZW50SGFuZGxlcnMoKSB7fVxuRXZlbnRIYW5kbGVycy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7XG5leHBvcnQge0V2ZW50RW1pdHRlcn07XG5cbi8vIG5vZGVqcyBvZGRpdHlcbi8vIHJlcXVpcmUoJ2V2ZW50cycpID09PSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXJcblxuRXZlbnRFbWl0dGVyLnVzaW5nRG9tYWlucyA9IGZhbHNlO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmRvbWFpbiA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kb21haW4gPSBudWxsO1xuICBpZiAoRXZlbnRFbWl0dGVyLnVzaW5nRG9tYWlucykge1xuICAgIC8vIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSBkb21haW4sIHRoZW4gYXR0YWNoIHRvIGl0LlxuICAgIGlmIChkb21haW4uYWN0aXZlICYmICEodGhpcyBpbnN0YW5jZW9mIGRvbWFpbi5Eb21haW4pKSB7XG4gICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbi5hY3RpdmU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJuXCIgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG4vLyBUaGVzZSBzdGFuZGFsb25lIGVtaXQqIGZ1bmN0aW9ucyBhcmUgdXNlZCB0byBvcHRpbWl6ZSBjYWxsaW5nIG9mIGV2ZW50XG4vLyBoYW5kbGVycyBmb3IgZmFzdCBjYXNlcyBiZWNhdXNlIGVtaXQoKSBpdHNlbGYgb2Z0ZW4gaGFzIGEgdmFyaWFibGUgbnVtYmVyIG9mXG4vLyBhcmd1bWVudHMgYW5kIGNhbiBiZSBkZW9wdGltaXplZCBiZWNhdXNlIG9mIHRoYXQuIFRoZXNlIGZ1bmN0aW9ucyBhbHdheXMgaGF2ZVxuLy8gdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgdGh1cyBkbyBub3QgZ2V0IGRlb3B0aW1pemVkLCBzbyB0aGUgY29kZVxuLy8gaW5zaWRlIHRoZW0gY2FuIGV4ZWN1dGUgZmFzdGVyLlxuZnVuY3Rpb24gZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgc2VsZikge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZik7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdE9uZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0VHdvKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEsIGFyZzIpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZ3MpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGV2ZW50cywgZG9tYWluO1xuICB2YXIgbmVlZERvbWFpbkV4aXQgPSBmYWxzZTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT0gbnVsbCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBkb21haW4gPSB0aGlzLmRvbWFpbjtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgaWYgKGRvbWFpbikge1xuICAgICAgaWYgKCFlcilcbiAgICAgICAgZXIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQnKTtcbiAgICAgIGVyLmRvbWFpbkVtaXR0ZXIgPSB0aGlzO1xuICAgICAgZXIuZG9tYWluID0gZG9tYWluO1xuICAgICAgZXIuZG9tYWluVGhyb3duID0gZmFsc2U7XG4gICAgICBkb21haW4uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4gKCcgKyBlciArICcpJyk7XG4gICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmICghaGFuZGxlcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGlzRm4gPSB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJztcbiAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgc3dpdGNoIChsZW4pIHtcbiAgICAvLyBmYXN0IGNhc2VzXG4gICAgY2FzZSAxOlxuICAgICAgZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgdGhpcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBlbWl0T25lKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICBlbWl0VHdvKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdKTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIHNsb3dlclxuICAgIGRlZmF1bHQ6XG4gICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgaWYgKG5lZWREb21haW5FeGl0KVxuICAgIGRvbWFpbi5leGl0KCk7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoIWV2ZW50cykge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKCFleGlzdGluZykge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICAgIGlmIChwcmVwZW5kKSB7XG4gICAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBpZiAoIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICAgIGlmIChtICYmIG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0pIHtcbiAgICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgdHlwZSArICcgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgICAgZW1pdFdhcm5pbmcodyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIGVtaXRXYXJuaW5nKGUpIHtcbiAgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnNvbGUud2FybihlKSA6IGNvbnNvbGUubG9nKGUpO1xufVxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgZmlyZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0YXJnZXQucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHJldHVybiBnO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmICghZXZlbnRzKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmICghbGlzdClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCAobGlzdC5saXN0ZW5lciAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGxpc3RbMF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cztcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKCFldmVudHMpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoIWV2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGtleTsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBkbyB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgfSB3aGlsZSAobGlzdGVuZXJzWzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICB2YXIgZXZsaXN0ZW5lcjtcbiAgdmFyIHJldDtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoIWV2ZW50cylcbiAgICByZXQgPSBbXTtcbiAgZWxzZSB7XG4gICAgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgICBpZiAoIWV2bGlzdGVuZXIpXG4gICAgICByZXQgPSBbXTtcbiAgICBlbHNlIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIHJldCA9IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdO1xuICAgIGVsc2VcbiAgICAgIHJldCA9IHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdC5vd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKS5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpXG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBpKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/dChleHBvcnRzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIl0sdCk6dCgoZT1lfHxzZWxmKS53ZWJ3b3JrZXJGaWxlPXt9KX0odGhpcyxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtlLmRlZmF1bHQ9ZnVuY3Rpb24gZSh0KXtpZihmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIGNvbnRlbnQgbXVzdCBleHBvcnQgYSBmdW5jdGlvblwiKTt2YXIgbj10LnRvU3RyaW5nKCksbz1uZXcgQmxvYihbXCIoXCIrbitcIikoKVwiXSx7dHlwZTpcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIn0pO3JldHVybiBuZXcgV29ya2VyKFVSTC5jcmVhdGVPYmplY3RVUkwobykpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlwYm1SbGVDNXFjeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKbGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlhaV0pYYjNKclpYSWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaDNiM0pyWlhJcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIZHZjbXRsY2lBaFBUMGdYQ0ptZFc1amRHbHZibHdpS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKR2FXeGxJR052Ym5SbGJuUWdiWFZ6ZENCbGVIQnZjblFnWVNCbWRXNWpkR2x2Ymx3aUtUdGNiaUFnSUNCOVhHNGdJQ0FnWTI5dWMzUWdZMjlrWlNBOUlIZHZjbXRsY2k1MGIxTjBjbWx1WnlncE8xeHVJQ0FnSUdOdmJuTjBJR0pzYjJJZ1BTQnVaWGNnUW14dllpaGJYQ0lvWENJZ0t5QmpiMlJsSUNzZ1hDSXBLQ2xjSWwwc0lIdGNiaUFnSUNBZ0lIUjVjR1U2SUZ3aVlYQndiR2xqWVhScGIyNHZhbUYyWVhOamNtbHdkRndpWEc0Z0lDQWdmU2s3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJYYjNKclpYSW9WVkpNTG1OeVpXRjBaVTlpYW1WamRGVlNUQ2hpYkc5aUtTazdYRzRnSUgxY2JuMWNiaUpkTENKdVlXMWxjeUk2V3lKM2IzSnJaWElpTENKRmNuSnZjaUlzSW1OdlpHVWlMQ0owYjFOMGNtbHVaeUlzSW1Kc2IySWlMQ0pDYkc5aUlpd2lkSGx3WlNJc0lsZHZjbXRsY2lJc0lsVlNUQ0lzSW1OeVpXRjBaVTlpYW1WamRGVlNUQ0pkTENKdFlYQndhVzVuY3lJNkltOU9RVU5GTEZkQlFWbEJMREpIUVVOWkxHMUNRVUZZUVN4UlFVTklMRWxCUVVsRExFMUJRVTBzTWtOQlJWcERMRVZCUVU5R0xFVkJRVTlITEZkQlEyUkRMRVZCUVU4c1NVRkJTVU1zUzBGQlN5eERRVUZETEVsQlFVMUlMRVZCUVU4c1QwRkJVU3hEUVVNeFEwa3NTMEZCVFN4clEwRkZSQ3hKUVVGSlF5eFBRVUZQUXl4SlFVRkpReXhuUWtGQlowSk1JbjA9XG4iLCJpbXBvcnQgV2Vid29ya2VyIGZyb20gJy4vRkZNUEVHV2ViV29ya2VyJztcbmltcG9ydCBXZWJ3b3JrZXJDbGllbnQgZnJvbSAnLi9GRk1QRUdXZWJXb3JrZXJDbGllbnQnO1xuXG5leHBvcnQgY29uc3QgRkZNUEVHV2Vid29ya2VyID0gV2Vid29ya2VyO1xuZXhwb3J0IGNvbnN0IEZGTVBFR1dlYndvcmtlckNsaWVudCA9IFdlYndvcmtlckNsaWVudDtcbiIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgV29ya2VyRmlsZSBmcm9tICd3ZWJ3b3JrZXItZmlsZSc7XG5cbmltcG9ydCB3b3JrZXJGaWxlIGZyb20gJy4vRkZNUEVHV2ViV29ya2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRkZNUEVHV2Vid29ya2VyQ2xpZW50IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtXb3JrZXJ9XG4gICAqL1xuICBfd29ya2VyID0ge307XG4gIC8qKlxuICAgKiBAdHlwZSB7QmxvYn1cbiAgICovXG4gIF9pbnB1dEZpbGUgPSB7fTtcblxuICAvKipcbiAgICogQHR5cGUge0Jvb2xlYW59XG4gICAqL1xuICB3b3JrZXJJc1JlYWR5ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuaW5pdFdlYldvcmtlcigpO1xuICB9XG5cbiAgaW5pdFdlYldvcmtlcigpIHtcbiAgICB0aGlzLndvcmtlciA9IG5ldyBXb3JrZXJGaWxlKHdvcmtlckZpbGUpO1xuXG4gICAgdGhpcy5sb2c7XG5cbiAgICBjb25zdCBsb2cgPSAodGhpcy53b3JrZXIub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgICBsZXQgbWVzc2FnZSA9IGV2ZW50LmRhdGE7XG5cbiAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT0gJ3JlYWR5Jykge1xuICAgICAgICAgIHRoaXMuZW1pdCgnb25SZWFkeScsICdmZm1wZWctYXNtLmpzIGZpbGUgaGFzIGJlZW4gbG9hZGVkLicpO1xuXG4gICAgICAgICAgdGhpcy53b3JrZXJJc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT0gJ3N0ZG91dCcpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ29uU3Rkb3V0JywgbWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT0gJ3N0YXJ0Jykge1xuICAgICAgICAgIHRoaXMuZW1pdCgnb25GaWxlUmVjZWl2ZWQnLCAnRmlsZSBSZWNlaXZlZCcpO1xuXG4gICAgICAgICAgbG9nKCdmaWxlIHJlY2VpdmVkIGZmbXBlZyBjb21tYW5kLicpO1xuICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UudHlwZSA9PSAnZG9uZScpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ29uRG9uZScsIG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldCB3b3JrZXIod29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gd29ya2VyO1xuICB9XG5cbiAgZ2V0IHdvcmtlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyO1xuICB9XG5cbiAgc2V0IGlucHV0RmlsZShpbnB1dEZpbGUpIHtcbiAgICBpZiAoIXRoaXMuaXNWaWRlbyhpbnB1dEZpbGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IGZpbGUgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXVkaW8gb3IgYSB2aWRlbycpO1xuICAgIH1cblxuICAgIHRoaXMuX2lucHV0RmlsZSA9IGlucHV0RmlsZTtcbiAgfVxuXG4gIGdldCBpbnB1dEZpbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0RmlsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1c2Ugd29ya2VyIHRvIGVuY29kZSBhdWRpb1xuICAgKiBAcGFyYW0ge0Jsb2J9IGZpbGVcbiAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59XG4gICAqL1xuICByZWFkRmlsZUFzQnVmZmVyQXJyYXkgPSAoZmlsZSkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUodGhpcy5yZXN1bHQpO1xuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdCh0aGlzLmVycm9yKTtcbiAgICAgIH07XG5cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgaW5wdXRGaWxlRXhpc3RzKCkge1xuICAgIGNvbnN0IGlucHV0RmlsZSA9IHRoaXMuaW5wdXRGaWxlO1xuXG4gICAgcmV0dXJuICEhKFxuICAgICAgaW5wdXRGaWxlICYmXG4gICAgICBpbnB1dEZpbGUgaW5zdGFuY2VvZiBCbG9iICYmXG4gICAgICBpbnB1dEZpbGUuc2l6ZSAmJlxuICAgICAgaW5wdXRGaWxlLnR5cGVcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIHVzZSB3b3JrZXIgdG8gZW5jb2RlIGF1ZGlvXG4gICAqIEBwYXJhbSB7QmxvYn0gaW5wdXRGaWxlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgKi9cbiAgY29udmVydElucHV0RmlsZVRvQXJyYXlCdWZmZXIoKSB7XG4gICAgaWYgKCF0aGlzLmlucHV0RmlsZUV4aXN0cygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IEZpbGUgaGFzIG5vdCBiZWVuIHNldCcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlYWRGaWxlQXNCdWZmZXJBcnJheSh0aGlzLmlucHV0RmlsZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbW1hbmRcbiAgICovXG4gIHJ1bkNvbW1hbmQgPSAoY29tbWFuZCwgdG90YWxNZW1vcnkgPSAzMzU1NDQzMikgPT4ge1xuICAgIGlmICh0eXBlb2YgY29tbWFuZCAhPT0gJ3N0cmluZycgfHwgIWNvbW1hbmQubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbW1hbmQgc2hvdWxkIGJlIHN0cmluZyBhbmQgbm90IGVtcHR5Jyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaW5wdXRGaWxlICYmIHRoaXMuaW5wdXRGaWxlLnR5cGUpIHtcbiAgICAgIHRoaXMuY29udmVydElucHV0RmlsZVRvQXJyYXlCdWZmZXIoKS50aGVuKChhcnJheUJ1ZmZlcikgPT4ge1xuICAgICAgICB3aGlsZSAoIXRoaXMud29ya2VySXNSZWFkeSkge31cblxuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IGB2aWRlby0ke0RhdGUubm93KCl9LndlYm1gO1xuICAgICAgICBjb25zdCBpbnB1dENvbW1hbmQgPSBgLWkgJHtmaWxlbmFtZX0gJHtjb21tYW5kfWA7XG5cbiAgICAgICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGFyZ3VtZW50czogaW5wdXRDb21tYW5kLnNwbGl0KCcgJyksXG4gICAgICAgICAgZmlsZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpLFxuICAgICAgICAgICAgICBuYW1lOiBmaWxlbmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICB0b3RhbE1lbW9yeSxcbiAgICAgICAgICB0eXBlOiAnY29tbWFuZCcsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgYXJndW1lbnRzOiBjb21tYW5kLnNwbGl0KCcgJyksXG4gICAgICAgIHRvdGFsTWVtb3J5LFxuICAgICAgICB0eXBlOiAnY29tbWFuZCcsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyaW5nIHwgQXJyYXk8U3RyaW5nPn0gbWVzc2FnZVxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgbG9nID0gKG1lc3NhZ2UpID0+XG4gICAgQXJyYXkuaXNBcnJheShtZXNzYWdlKVxuICAgICAgPyBjb25zb2xlLmxvZy5jYWxsKG51bGwsIG1lc3NhZ2UpXG4gICAgICA6IGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Jsb2J9IGZpbGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGlzVmlkZW8gPSAoZmlsZSkgPT4ge1xuICAgIGNvbnN0IGZpbGVUeXBlID0gZmlsZS50eXBlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIGZpbGUgaW5zdGFuY2VvZiBCbG9iICYmXG4gICAgICAoZmlsZVR5cGUuaW5jbHVkZXMoJ3ZpZGVvJykgfHwgZmlsZVR5cGUuaW5jbHVkZXMoJ2F1ZGlvJykpXG4gICAgKTtcbiAgfTtcblxuICB0ZXJtaW5hdGUgPSAoKSA9PiB7XG4gICAgdGhpcy53b3JrZXIudGVybWluYXRlKCk7XG4gIH07XG59XG4iXSwibmFtZXMiOlsid29ya2VyRmlsZSIsImltcG9ydFNjcmlwdHMiLCJub3ciLCJEYXRlIiwicHJpbnQiLCJ0ZXh0IiwicG9zdE1lc3NhZ2UiLCJ0eXBlIiwiZGF0YSIsIm9ubWVzc2FnZSIsImV2ZW50IiwibWVzc2FnZSIsIk1vZHVsZSIsImFyZ3VtZW50cyIsImZpbGVzIiwicHJpbnRFcnIiLCJUT1RBTF9NRU1PUlkiLCJ0b3RhbE1lbW9yeSIsImpvaW4iLCJ0aW1lIiwicmVzdWx0IiwiZmZtcGVnX3J1biIsInRvdGFsVGltZSIsImRvbWFpbiIsIkV2ZW50SGFuZGxlcnMiLCJFdmVudEVtaXR0ZXIiLCJpbml0IiwiY2FsbCIsInRoaXMiLCIkZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsInVuZGVmaW5lZCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiX2FkZExpc3RlbmVyIiwidGFyZ2V0IiwibGlzdGVuZXIiLCJwcmVwZW5kIiwibSIsImV2ZW50cyIsImV4aXN0aW5nIiwiVHlwZUVycm9yIiwiX2V2ZW50cyIsIm5ld0xpc3RlbmVyIiwiZW1pdCIsIl9ldmVudHNDb3VudCIsInVuc2hpZnQiLCJwdXNoIiwid2FybmVkIiwibGVuZ3RoIiwidyIsIkVycm9yIiwibmFtZSIsImVtaXR0ZXIiLCJjb3VudCIsImUiLCJjb25zb2xlIiwid2FybiIsImxvZyIsImVtaXRXYXJuaW5nIiwiX29uY2VXcmFwIiwiZmlyZWQiLCJnIiwicmVtb3ZlTGlzdGVuZXIiLCJhcHBseSIsImxpc3RlbmVyQ291bnQiLCJldmxpc3RlbmVyIiwiYXJyYXlDbG9uZSIsImFyciIsImkiLCJjb3B5IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJ1c2luZ0RvbWFpbnMiLCJhY3RpdmUiLCJEb21haW4iLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsIm4iLCJpc05hTiIsImdldE1heExpc3RlbmVycyIsImVyIiwiaGFuZGxlciIsImxlbiIsImFyZ3MiLCJkb0Vycm9yIiwiZXJyb3IiLCJkb21haW5FbWl0dGVyIiwiZG9tYWluVGhyb3duIiwiZXJyIiwiY29udGV4dCIsImlzRm4iLCJzZWxmIiwibGlzdGVuZXJzIiwiZW1pdE5vbmUiLCJhcmcxIiwiZW1pdE9uZSIsImFyZzIiLCJlbWl0VHdvIiwiYXJnMyIsImVtaXRUaHJlZSIsImVtaXRNYW55Iiwib24iLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsIm9uY2UiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsImluZGV4IiwiayIsInBvcCIsInNwbGljZU9uZSIsInJlbW92ZUFsbExpc3RlbmVycyIsImtleSIsImtleXMiLCJyZXQiLCJ1bndyYXBMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiUmVmbGVjdCIsIm93bktleXMiLCJleHBvcnRzIiwiZGVmYXVsdCIsInQiLCJ0b1N0cmluZyIsIm8iLCJCbG9iIiwiV29ya2VyIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIkZGTVBFR1dlYndvcmtlciIsIldlYndvcmtlciIsIkZGTVBFR1dlYndvcmtlckNsaWVudCIsImZpbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwib25lcnJvciIsInJlYWRBc0FycmF5QnVmZmVyIiwiY29tbWFuZCIsIl90aGlzIiwiaW5wdXRGaWxlIiwiY29udmVydElucHV0RmlsZVRvQXJyYXlCdWZmZXIiLCJ0aGVuIiwiYXJyYXlCdWZmZXIiLCJ3b3JrZXJJc1JlYWR5IiwiZmlsZW5hbWUiLCJpbnB1dENvbW1hbmQiLCJ3b3JrZXIiLCJzcGxpdCIsIlVpbnQ4QXJyYXkiLCJpc0FycmF5IiwiZmlsZVR5cGUiLCJpbmNsdWRlcyIsInRlcm1pbmF0ZSIsImluaXRXZWJXb3JrZXIiLCJXb3JrZXJGaWxlIiwiX3RoaXMyIiwic2l6ZSIsImlucHV0RmlsZUV4aXN0cyIsInJlYWRGaWxlQXNCdWZmZXJBcnJheSIsIl93b3JrZXIiLCJpc1ZpZGVvIiwiX2lucHV0RmlsZSJdLCJtYXBwaW5ncyI6IjRNQUFtQixTQUFiQSxJQUlKQyxjQUZFLDRFQUlJQyxFQUFNQyxLQUFLRCxhQUVSRSxFQUFNQyxHQUNiQyxZQUFZLENBQUVDLEtBQU0sU0FBVUMsS0FBTUgsSUFHdENJLFVBQVksU0FBU0MsT0FDYkMsRUFBVUQsRUFBTUYsUUFFRCxZQUFqQkcsRUFBUUosS0FBb0IsS0FDeEJLLEVBQVMsQ0FDYkMsVUFBV0YsRUFBUUUsV0FBYSxHQUNoQ0MsTUFBT0gsRUFBUUcsT0FBUyxHQUN4QlYsTUFBT0EsRUFDUFcsU0FBVVgsRUFDVlksYUFBY0wsRUFBUU0sYUFBZSxVQUd2Q1gsWUFBWSxDQUNWRSxLQUFNSSxFQUFPQyxVQUFVSyxLQUFLLEtBQzVCWCxLQUFNLFVBRVJELFlBQVksQ0FDVkUsaUNBQTJCSSxFQUFPQyxVQUFVSyxLQUFLLGFBQy9DTixFQUFPSSwwQ0FDbUJKLEVBQU9JLHVCQUM3QixJQUVOVCxLQUFNLGVBR0ZZLEVBQU9qQixJQUNQa0IsRUFBU0MsV0FBV1QsR0FDcEJVLEVBQVlwQixJQUFRaUIsRUFF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
