!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).ffmpegWebworker={})}(this,function(e){"use strict";var t="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function a(){importScripts("https://cdn.rawgit.com/bgrins/videoconverter.js/master/build/ffmpeg-all-codecs.js");var s=Date.now;function a(e){postMessage({type:"stdout",data:e})}onmessage=function(e){var t=e.data;if("command"===t.type){var n={print:a,printErr:a,files:t.files||[],arguments:t.arguments||[],TOTAL_MEMORY:t.totalMemory||null};postMessage({type:"start",data:n.arguments.join(" ")}),postMessage({type:"stdout",data:"Received command: "+n.arguments.join(" ")+(n.TOTAL_MEMORY?".  Processing with "+n.TOTAL_MEMORY+" bits.":"")});var r=s(),i=ffmpeg_run(n),o=s()-r;postMessage({type:"stdout",data:"Finished processing (took "+o+"ms)"}),postMessage({type:"done",data:i,time:o})}},postMessage({type:"ready"})}var u,f,l,c=(function(e,t){var n;(n=t).default=function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"!=typeof t)throw new Error("File content must export a function");var n=t.toString(),r=new Blob(["("+n+")()"],{type:"application/javascript"});return new Worker(URL.createObjectURL(r))},Object.defineProperty(n,"__esModule",{value:!0})}(u={exports:{}},u.exports),u.exports),p=(f=c)&&f.__esModule&&Object.prototype.hasOwnProperty.call(f,"default")?f.default:f;function h(){}function d(){d.init.call(this)}function y(e){return void 0===e._maxListeners?d.defaultMaxListeners:e._maxListeners}function v(e,t,n,r){var i,o,s;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if((o=e._events)?(o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]):(o=e._events=new h,e._eventsCount=0),s){if("function"==typeof s?s=o[t]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),!s.warned&&(i=y(e))&&0<i&&s.length>i){s.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=e,a.type=t,a.count=s.length,function(e){"function"==typeof console.warn?console.warn(e):console.log(e)}(a)}}else s=o[t]=n,++e._eventsCount;return e}function m(e,t,n){var r=!1;function i(){e.removeListener(t,i),r||(r=!0,n.apply(e,arguments))}return i.listener=n,i}function w(e){var t=this._events;if(t){var n=t[e];if("function"==typeof n)return 1;if(n)return n.length}return 0}function g(e,t){for(var n=new Array(t);t--;)n[t]=e[t];return n}h.prototype=Object.create(null),(d.EventEmitter=d).usingDomains=!1,d.prototype.domain=void 0,d.prototype._events=void 0,d.prototype._maxListeners=void 0,d.defaultMaxListeners=10,d.init=function(){this.domain=null,d.usingDomains&&l.active&&l.Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new h,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},d.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},d.prototype.getMaxListeners=function(){return y(this)},d.prototype.emit=function(e,t,n,r){var i,o,s,a,u,f,l,c="error"===e;if(f=this._events)c=c&&null==f.error;else if(!c)return!1;if(l=this.domain,c){if(i=t,l)return(i=i||new Error('Uncaught, unspecified "error" event')).domainEmitter=this,i.domain=l,i.domainThrown=!1,l.emit("error",i),!1;if(i instanceof Error)throw i;var p=new Error('Uncaught, unspecified "error" event. ('+i+")");throw p.context=i,p}if(!(o=f[e]))return!1;var h="function"==typeof o;switch(s=arguments.length){case 1:!function(e,t,n){if(t)e.call(n);else for(var r=e.length,i=g(e,r),o=0;o<r;++o)i[o].call(n)}(o,h,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var i=e.length,o=g(e,i),s=0;s<i;++s)o[s].call(n,r)}(o,h,this,t);break;case 3:!function(e,t,n,r,i){if(t)e.call(n,r,i);else for(var o=e.length,s=g(e,o),a=0;a<o;++a)s[a].call(n,r,i)}(o,h,this,t,n);break;case 4:!function(e,t,n,r,i,o){if(t)e.call(n,r,i,o);else for(var s=e.length,a=g(e,s),u=0;u<s;++u)a[u].call(n,r,i,o)}(o,h,this,t,n,r);break;default:for(a=new Array(s-1),u=1;u<s;u++)a[u-1]=arguments[u];!function(e,t,n,r){if(t)e.apply(n,r);else for(var i=e.length,o=g(e,i),s=0;s<i;++s)o[s].apply(n,r)}(o,h,this,a)}return!0},d.prototype.on=d.prototype.addListener=function(e,t){return v(this,e,t,!1)},d.prototype.prependListener=function(e,t){return v(this,e,t,!0)},d.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,m(this,e,t)),this},d.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,m(this,e,t)),this},d.prototype.removeListener=function(e,t){var n,r,i,o,s;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[e]))return this;if(n===t||n.listener&&n.listener===t)0==--this._eventsCount?this._events=new h:(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length;0<o--;)if(n[o]===t||n[o].listener&&n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new h,this;delete r[e]}else!function(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}(n,i);r.removeListener&&this.emit("removeListener",e,s||t)}return this},d.prototype.removeAllListeners=function(e){var t,n;if(!(n=this._events))return this;if(!n.removeListener)return 0===arguments.length?(this._events=new h,this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=new h:delete n[e]),this;if(0===arguments.length){for(var r,i=Object.keys(n),o=0;o<i.length;++o)"removeListener"!==(r=i[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new h,this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(;this.removeListener(e,t[t.length-1]),t[0];);return this},d.prototype.listeners=function(e){var t,n=this._events;return n&&(t=n[e])?"function"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(t):[]},d.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):w.call(e,t)},d.prototype.listenerCount=w,d.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};var b=function(){function e(){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n(s(o=function(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?s(e):t}(this,i(e).call(this))),"_worker",{}),n(s(o),"_inputFile",{}),n(s(o),"workerIsReady",!1),n(s(o),"readFileAsBufferArray",function(r){return new Promise(function(e,t){var n=new FileReader;n.onload=function(){e(this.result)},n.onerror=function(){t(this.error)},n.readAsArrayBuffer(r)})}),n(s(o),"runCommand",function(r,i){if("string"!=typeof r||!r.length)throw new Error("command should be string and not empty");o.inputFile&&o.inputFile.type?o.convertInputFileToArrayBuffer().then(function(e){for(;!o.workerIsReady;);var t="video-".concat(Date.now(),".webm"),n="-i ".concat(t," ").concat(r);o.worker.postMessage({type:"command",arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t},i]})}):o.worker.postMessage({type:"command",arguments:r.split(" "),totalMemory:i})}),n(s(o),"log",function(e){return Array.isArray(e)?console.log.call(null,e):console.log(e)}),n(s(o),"isVideo",function(e){var t=e.type;return e instanceof Blob&&(t.includes("video")||t.includes("audio"))}),o.initWebWorker(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(e,d),function(e,t,n){t&&r(e.prototype,t),n&&r(e,n)}(e,[{key:"initWebWorker",value:function(){var n=this;this.worker=new p(a),this.log;var r=this.worker.onmessage=function(e){var t=e.data;e&&e.type&&("ready"==t.type?(n.emit("onReady","ffmpeg-asm.js file has been loaded."),n.workerIsReady=!0):"stdout"==t.type?n.emit("onStdout",t.data):"start"==t.type?(n.emit("onFileReceived","File Received"),r("file received ffmpeg command.")):"done"==t.type&&n.emit("onDone",t.data))}}},{key:"inputFileExists",value:function(){var e=this.inputFile;return!!(e&&e instanceof Blob&&e.size&&e.type)}},{key:"convertInputFileToArrayBuffer",value:function(){if(!this.inputFileExists())throw new Error("Input File has not been set");return this.readFileAsBufferArray(this.inputFile)}},{key:"worker",set:function(e){this._worker=e},get:function(){return this._worker}},{key:"inputFile",set:function(e){if(!this.isVideo(e))throw new Error("Input file is expected to be an audio or a video");this._inputFile=e},get:function(){return this._inputFile}}]),e}(),_=a,L=b,k={on:function(){},emit:function(){}},E=t||window;E&&E.Blob&&(k=new b);var M=k;e.FFMPEGWebworker=_,e.FFMPEGWebworkerClient=L,e.default=M,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
